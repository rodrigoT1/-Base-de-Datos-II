create database biblioteca
USE biblioteca;
drop database biblioteca

CREATE TABLE autor (
  id INTEGER AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(50) NOT NULL,
  nacionalidad VARCHAR(50),
  fecha_nacimiento DATE
);

INSERT INTO autor (nombre, nacionalidad, fecha_nacimiento) VALUES
('Gabriel Garcia Marquez', 'Colombiano', '1927-03-06'),
('Mario Vargas Llosa', 'Peruano', '1936-03-28'),
('Pablo Neruda', 'Chileno', '1904-07-12'),
('Octavio Paz', 'Mexicano', '1914-03-31'),
('Jorge Luis Borges', 'Argentino', '1899-08-24');

CREATE TABLE usuario (
  id INTEGER AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  fecha_nacimiento DATE,
  direccion VARCHAR(100)
);

INSERT INTO usuario (nombre, email, fecha_nacimiento, direccion) VALUES
('Juan Perez', 'juan.perez@gmail.com', '1985-06-20', 'Calle Falsa 123'),
('Maria Rodriguez', 'maria.rodriguez@hotmail.com', '1990-03-15', 'Av. Siempreviva 456'),
('Pedro Gomez', 'pedro.gomez@yahoo.com', '1982-12-10', 'Calle 7ma 789'),
('Laura Sanchez', 'laura.sanchez@gmail.com', '1995-07-22', 'Av. Primavera 234'),
('Jorge Fernandez', 'jorge.fernandez@gmail.com', '1988-04-18', 'Calle Real 567');

CREATE TABLE libro (
  id INTEGER AUTO_INCREMENT PRIMARY KEY,
  titulo VARCHAR(100) NOT NULL,
  isbn VARCHAR(20),
  fecha_publicacion DATE,
  autor_id INTEGER,
  FOREIGN KEY (autor_id) REFERENCES autor(id)
);

INSERT INTO libro (titulo, isbn, fecha_publicacion, autor_id) VALUES
('Cien años de soledad', '978-0307474728', '1967-05-30', 1),
('La ciudad y los perros', '978-8466333867', '1962-10-10', 2),
('Veinte poemas de amor y una canción desesperada', '978-0307477927', '1924-08-14', 3),
('El laberinto de la soledad', '978-9681603011', '1950-01-01', 4),
('El Aleph', '978-0307950901', '1949-06-30', 5);

CREATE TABLE prestamo (
  id INTEGER AUTO_INCREMENT PRIMARY KEY,
  fecha_inicio DATE NOT NULL,
  fecha_fin DATE NOT NULL,
  libro_id INTEGER REFERENCES libro(id) ON DELETE CASCADE,
  usuario_id INTEGER REFERENCES usuario(id) ON DELETE CASCADE
);

INSERT INTO prestamo (fecha_inicio, fecha_fin, libro_id, usuario_id) VALUES
('2022-01-01', '2022-01-15', 1, 1),
('2022-01-03', '2022-01-18', 2, 2),
('2022-01-05', '2022-01-20', 3, 3),
('2022-01-07', '2022-01-22', 4, 4),
('2022-01-09', '2022-01-24', 5, 5);

CREATE TABLE categoria (
  id INTEGER AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(50) NOT NULL
);

INSERT INTO categoria (nombre) VALUES
('Novela'),
('Poesía'),
('Ensayo'),
('Ciencia Ficción'),
('Historia');


CREATE TABLE libro_categoria (
  id INTEGER AUTO_INCREMENT PRIMARY KEY,
  libro_id INTEGER REFERENCES libro(id) ON DELETE CASCADE,
  categoria_id INTEGER REFERENCES categoria(id) ON DELETE CASCADE
);

INSERT INTO libro_categoria (libro_id, categoria_id) VALUES
(1, 1),
(1, 3),
(2, 1),
(2, 5),
(3, 2),
(4, 3),
(5, 4);

alter table libro
    add column paginas integer default 20;
alter table libro
    add column editorial varchar(70) default 'Don bosco';


select * from autor;
select * from libro;
select * from libro_categoria;
select * from prestamo;
select * from usuario;
select * from categoria;


######################libro y autor##############################################
################# mostrar todos los libros de los autores de nacionalidad argentino ########################

select * from autor where nacionalidad = 'Argentino';

#################### otra manera #########################################################
create view inner_join_book as
select au.nombre,
       au.nacionalidad,
       lib.titulo
from autor as au
    inner join libro as lib on au.id = lib.autor_id
where au.nacionalidad ='Argentino';

###################################categoria###########################################################
select * from categoria where nombre = 'Ciencia Ficcion';
#################### otra manera #########################################################
create view libros_ciencia_ficcion as
select lib.titulo as libro,
       cat.nombre as categoria
from libro_categoria lc
inner join libro as lib on lc.libro_id = lib.id
inner join categoria as cat on lc.categoria_id = cat.id
where cat.nombre ='Ciencia Ficcion'

#######################EJERCICIO~~~~~~#########
create or replace view bookContent as
select lib.titulo as titlebook,
       lib.editoria as editorialbook,
       lib.paginas as pagesbook,
       (
           case
           when lib.paginas > 10 and lib.paginas <= 30 then 'contenido basico'
           when lib.paginas > 30 and lib.paginas <= 80 then 'contenido mediano'
           when lib.paginas > 80 and lib.paginas <= 150 then 'contenido superior'
           when lib.paginas > 0 and lib.paginas <= 30 then 'contenido basico'
           ELSE'CONTENIDO AVANZADO'
           end
       )as typeConentBook
from libro as lib;
######## DECUARDO A LA VISTA CREADA CONTRA CUANTOSLIBROS SON DE CONTENIDO MEDIO
SELECT count(*)
FROM booKContent as bk
where bk.typeConentBook ='CONTENIDO MEDIANO';

###################ejerecicico 2###############################
SELECT CONCAT(lb.titulo,  ' - ',lb.editoria, ' - ',cat.nombre) as 'BOOK DETAIL',
    CONCAT(AUT.nombre,' - ', AUT.nacionalidad)as 'AUTOR DETAIL'
    FROM libro as lb
INNER JOIN libro_categoria as LC on LC.id = lb.id
INNER JOIN categoria as cat on lc.id = cat.id
INNER JOIN autor as AUT on lb.id = AUT.id;

# decuerdo a la vista creada generar la siguiente si book_detail esta la editorial NOVA, generar una columna que diga
# "EN VENTA" caso contrario colocar "EN PROCESO"

SELECT *,
(
    CASE
        WHEN b.BOOKDETAIL LIKE '%NOVA%' THEN 'EN VENTA'
        ELSE  'EN PROCESO'
        END
) AS Promocion
FROM book_And_Autor AS B

